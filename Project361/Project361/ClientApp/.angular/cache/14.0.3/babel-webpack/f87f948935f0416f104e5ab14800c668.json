{"ast":null,"code":"import _asyncToGenerator from \"/Users/samfoit/CSCE361/soft361_capstone/Project361/Project361/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { UserManager } from 'oidc-client';\nimport { BehaviorSubject, concat, from } from 'rxjs';\nimport { filter, map, mergeMap, take, tap } from 'rxjs/operators';\nimport { ApplicationPaths, ApplicationName } from './api-authorization.constants';\nimport * as i0 from \"@angular/core\";\nexport var AuthenticationResultStatus;\n\n(function (AuthenticationResultStatus) {\n  AuthenticationResultStatus[AuthenticationResultStatus[\"Success\"] = 0] = \"Success\";\n  AuthenticationResultStatus[AuthenticationResultStatus[\"Redirect\"] = 1] = \"Redirect\";\n  AuthenticationResultStatus[AuthenticationResultStatus[\"Fail\"] = 2] = \"Fail\";\n})(AuthenticationResultStatus || (AuthenticationResultStatus = {}));\n\nexport class AuthorizeService {\n  constructor() {\n    // By default pop ups are disabled because they don't work properly on Edge.\n    // If you want to enable pop up authentication simply set this flag to false.\n    this.popUpDisabled = true;\n    this.userSubject = new BehaviorSubject(null);\n  }\n\n  isAuthenticated() {\n    return this.getUser().pipe(map(u => !!u));\n  }\n\n  getUser() {\n    return concat(this.userSubject.pipe(take(1), filter(u => !!u)), this.getUserFromStorage().pipe(filter(u => !!u), tap(u => this.userSubject.next(u))), this.userSubject.asObservable());\n  }\n\n  getAccessToken() {\n    return from(this.ensureUserManagerInitialized()).pipe(mergeMap(() => from(this.userManager.getUser())), map(user => user && user.access_token));\n  } // We try to authenticate the user in three different ways:\n  // 1) We try to see if we can authenticate the user silently. This happens\n  //    when the user is already logged in on the IdP and is done using a hidden iframe\n  //    on the client.\n  // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\n  //    Pop-Up blocker or the user has disabled PopUps.\n  // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\n  //    redirect flow.\n\n\n  signIn(state) {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this.ensureUserManagerInitialized();\n      let user = null;\n\n      try {\n        user = yield _this.userManager.signinSilent(_this.createArguments());\n\n        _this.userSubject.next(user.profile);\n\n        return _this.success(state);\n      } catch (silentError) {\n        // User might not be authenticated, fallback to popup authentication\n        console.log('Silent authentication error: ', silentError);\n\n        try {\n          if (_this.popUpDisabled) {\n            throw new Error('Popup disabled. Change \\'authorize.service.ts:AuthorizeService.popupDisabled\\' to false to enable it.');\n          }\n\n          user = yield _this.userManager.signinPopup(_this.createArguments());\n\n          _this.userSubject.next(user.profile);\n\n          return _this.success(state);\n        } catch (popupError) {\n          if (popupError.message === 'Popup window closed') {\n            // The user explicitly cancelled the login action by closing an opened popup.\n            return _this.error('The user closed the window.');\n          } else if (!_this.popUpDisabled) {\n            console.log('Popup authentication error: ', popupError);\n          } // PopUps might be blocked by the user, fallback to redirect\n\n\n          try {\n            yield _this.userManager.signinRedirect(_this.createArguments(state));\n            return _this.redirect();\n          } catch (redirectError) {\n            console.log('Redirect authentication error: ', redirectError);\n            return _this.error(redirectError);\n          }\n        }\n      }\n    })();\n  }\n\n  completeSignIn(url) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2.ensureUserManagerInitialized();\n        const user = yield _this2.userManager.signinCallback(url);\n\n        _this2.userSubject.next(user && user.profile);\n\n        return _this2.success(user && user.state);\n      } catch (error) {\n        console.log('There was an error signing in: ', error);\n        return _this2.error('There was an error signing in.');\n      }\n    })();\n  }\n\n  signOut(state) {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        if (_this3.popUpDisabled) {\n          throw new Error('Popup disabled. Change \\'authorize.service.ts:AuthorizeService.popupDisabled\\' to false to enable it.');\n        }\n\n        yield _this3.ensureUserManagerInitialized();\n        yield _this3.userManager.signoutPopup(_this3.createArguments());\n\n        _this3.userSubject.next(null);\n\n        return _this3.success(state);\n      } catch (popupSignOutError) {\n        console.log('Popup signout error: ', popupSignOutError);\n\n        try {\n          yield _this3.userManager.signoutRedirect(_this3.createArguments(state));\n          return _this3.redirect();\n        } catch (redirectSignOutError) {\n          console.log('Redirect signout error: ', redirectSignOutError);\n          return _this3.error(redirectSignOutError);\n        }\n      }\n    })();\n  }\n\n  completeSignOut(url) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      yield _this4.ensureUserManagerInitialized();\n\n      try {\n        const response = yield _this4.userManager.signoutCallback(url);\n\n        _this4.userSubject.next(null);\n\n        return _this4.success(response && response.state);\n      } catch (error) {\n        console.log(`There was an error trying to log out '${error}'.`);\n        return _this4.error(error);\n      }\n    })();\n  }\n\n  createArguments(state) {\n    return {\n      useReplaceToNavigate: true,\n      data: state\n    };\n  }\n\n  error(message) {\n    return {\n      status: AuthenticationResultStatus.Fail,\n      message\n    };\n  }\n\n  success(state) {\n    return {\n      status: AuthenticationResultStatus.Success,\n      state\n    };\n  }\n\n  redirect() {\n    return {\n      status: AuthenticationResultStatus.Redirect\n    };\n  }\n\n  ensureUserManagerInitialized() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this5.userManager !== undefined) {\n        return;\n      }\n\n      const response = yield fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\n\n      if (!response.ok) {\n        throw new Error(`Could not load settings for '${ApplicationName}'`);\n      }\n\n      const settings = yield response.json();\n      settings.automaticSilentRenew = true;\n      settings.includeIdTokenInSilentRenew = true;\n      _this5.userManager = new UserManager(settings);\n\n      _this5.userManager.events.addUserSignedOut( /*#__PURE__*/_asyncToGenerator(function* () {\n        yield _this5.userManager.removeUser();\n\n        _this5.userSubject.next(null);\n      }));\n    })();\n  }\n\n  getUserFromStorage() {\n    return from(this.ensureUserManagerInitialized()).pipe(mergeMap(() => this.userManager.getUser()), map(u => u && u.profile));\n  }\n\n}\n\nAuthorizeService.ɵfac = function AuthorizeService_Factory(t) {\n  return new (t || AuthorizeService)();\n};\n\nAuthorizeService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthorizeService,\n  factory: AuthorizeService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["UserManager","BehaviorSubject","concat","from","filter","map","mergeMap","take","tap","ApplicationPaths","ApplicationName","AuthenticationResultStatus","AuthorizeService","constructor","isAuthenticated","getUser","pipe","u","userSubject","getUserFromStorage","next","asObservable","getAccessToken","ensureUserManagerInitialized","userManager","user","access_token","signIn","state","signinSilent","createArguments","profile","success","silentError","console","log","popUpDisabled","Error","signinPopup","popupError","message","error","signinRedirect","redirect","redirectError","completeSignIn","url","signinCallback","signOut","signoutPopup","popupSignOutError","signoutRedirect","redirectSignOutError","completeSignOut","response","signoutCallback","useReplaceToNavigate","data","status","Fail","Success","Redirect","undefined","fetch","ApiAuthorizationClientConfigurationUrl","ok","settings","json","automaticSilentRenew","includeIdTokenInSilentRenew","events","addUserSignedOut","removeUser","factory","providedIn"],"sourceRoot":"","sources":["/Users/samfoit/CSCE361/soft361_capstone/Project361/Project361/ClientApp/src/api-authorization/authorize.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { User, UserManager } from 'oidc-client';\nimport { BehaviorSubject, concat, from, Observable } from 'rxjs';\nimport { filter, map, mergeMap, take, tap } from 'rxjs/operators';\nimport { ApplicationPaths, ApplicationName } from './api-authorization.constants';\n\nexport type IAuthenticationResult =\n  SuccessAuthenticationResult |\n  FailureAuthenticationResult |\n  RedirectAuthenticationResult;\n\nexport interface SuccessAuthenticationResult {\n  status: AuthenticationResultStatus.Success;\n  state: any;\n}\n\nexport interface FailureAuthenticationResult {\n  status: AuthenticationResultStatus.Fail;\n  message: string;\n}\n\nexport interface RedirectAuthenticationResult {\n  status: AuthenticationResultStatus.Redirect;\n}\n\nexport enum AuthenticationResultStatus {\n  Success,\n  Redirect,\n  Fail\n}\n\nexport interface IUser {\n  name?: string;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthorizeService {\n  // By default pop ups are disabled because they don't work properly on Edge.\n  // If you want to enable pop up authentication simply set this flag to false.\n\n  private popUpDisabled = true;\n  private userManager?: UserManager;\n  private userSubject: BehaviorSubject<IUser | null> = new BehaviorSubject<IUser | null>(null);\n\n  public isAuthenticated(): Observable<boolean> {\n    return this.getUser().pipe(map(u => !!u));\n  }\n\n  public getUser(): Observable<IUser | null> {\n    return concat(\n      this.userSubject.pipe(take(1), filter(u => !!u)),\n      this.getUserFromStorage().pipe(filter(u => !!u), tap(u => this.userSubject.next(u))),\n      this.userSubject.asObservable());\n  }\n\n  public getAccessToken(): Observable<string | null> {\n    return from(this.ensureUserManagerInitialized())\n      .pipe(mergeMap(() => from(this.userManager!.getUser())),\n        map(user => user && user.access_token));\n  }\n\n  // We try to authenticate the user in three different ways:\n  // 1) We try to see if we can authenticate the user silently. This happens\n  //    when the user is already logged in on the IdP and is done using a hidden iframe\n  //    on the client.\n  // 2) We try to authenticate the user using a PopUp Window. This might fail if there is a\n  //    Pop-Up blocker or the user has disabled PopUps.\n  // 3) If the two methods above fail, we redirect the browser to the IdP to perform a traditional\n  //    redirect flow.\n  public async signIn(state: any): Promise<IAuthenticationResult> {\n    await this.ensureUserManagerInitialized();\n    let user: User | null = null;\n    try {\n      user = await this.userManager!.signinSilent(this.createArguments());\n      this.userSubject.next(user.profile);\n      return this.success(state);\n    } catch (silentError) {\n      // User might not be authenticated, fallback to popup authentication\n      console.log('Silent authentication error: ', silentError);\n\n      try {\n        if (this.popUpDisabled) {\n          throw new Error('Popup disabled. Change \\'authorize.service.ts:AuthorizeService.popupDisabled\\' to false to enable it.');\n        }\n        user = await this.userManager!.signinPopup(this.createArguments());\n        this.userSubject.next(user.profile);\n        return this.success(state);\n      } catch (popupError: any) {\n        if (popupError.message === 'Popup window closed') {\n          // The user explicitly cancelled the login action by closing an opened popup.\n          return this.error('The user closed the window.');\n        } else if (!this.popUpDisabled) {\n          console.log('Popup authentication error: ', popupError);\n        }\n\n        // PopUps might be blocked by the user, fallback to redirect\n        try {\n          await this.userManager!.signinRedirect(this.createArguments(state));\n          return this.redirect();\n        } catch (redirectError: any) {\n          console.log('Redirect authentication error: ', redirectError);\n          return this.error(redirectError);\n        }\n      }\n    }\n  }\n\n  public async completeSignIn(url: string): Promise<IAuthenticationResult> {\n    try {\n      await this.ensureUserManagerInitialized();\n      const user = await this.userManager!.signinCallback(url);\n      this.userSubject.next(user && user.profile);\n      return this.success(user && user.state);\n    } catch (error) {\n      console.log('There was an error signing in: ', error);\n      return this.error('There was an error signing in.');\n    }\n  }\n\n  public async signOut(state: any): Promise<IAuthenticationResult> {\n    try {\n      if (this.popUpDisabled) {\n        throw new Error('Popup disabled. Change \\'authorize.service.ts:AuthorizeService.popupDisabled\\' to false to enable it.');\n      }\n\n      await this.ensureUserManagerInitialized();\n      await this.userManager!.signoutPopup(this.createArguments());\n      this.userSubject.next(null);\n      return this.success(state);\n    } catch (popupSignOutError: any) {\n      console.log('Popup signout error: ', popupSignOutError);\n      try {\n        await this.userManager!.signoutRedirect(this.createArguments(state));\n        return this.redirect();\n      } catch (redirectSignOutError: any) {\n        console.log('Redirect signout error: ', redirectSignOutError);\n        return this.error(redirectSignOutError);\n      }\n    }\n  }\n\n  public async completeSignOut(url: string): Promise<IAuthenticationResult> {\n    await this.ensureUserManagerInitialized();\n    try {\n      const response = await this.userManager!.signoutCallback(url);\n      this.userSubject.next(null);\n      return this.success(response && response.state);\n    } catch (error: any) {\n      console.log(`There was an error trying to log out '${error}'.`);\n      return this.error(error);\n    }\n  }\n\n  private createArguments(state?: any): any {\n    return { useReplaceToNavigate: true, data: state };\n  }\n\n  private error(message: string): IAuthenticationResult {\n    return { status: AuthenticationResultStatus.Fail, message };\n  }\n\n  private success(state: any): IAuthenticationResult {\n    return { status: AuthenticationResultStatus.Success, state };\n  }\n\n  private redirect(): IAuthenticationResult {\n    return { status: AuthenticationResultStatus.Redirect };\n  }\n\n  private async ensureUserManagerInitialized(): Promise<void> {\n    if (this.userManager !== undefined) {\n      return;\n    }\n\n    const response = await fetch(ApplicationPaths.ApiAuthorizationClientConfigurationUrl);\n    if (!response.ok) {\n      throw new Error(`Could not load settings for '${ApplicationName}'`);\n    }\n\n    const settings: any = await response.json();\n    settings.automaticSilentRenew = true;\n    settings.includeIdTokenInSilentRenew = true;\n    this.userManager = new UserManager(settings);\n\n    this.userManager.events.addUserSignedOut(async () => {\n      await this.userManager!.removeUser();\n      this.userSubject.next(null);\n    });\n  }\n\n  private getUserFromStorage(): Observable<IUser | null> {\n    return from(this.ensureUserManagerInitialized())\n      .pipe(\n        mergeMap(() => this.userManager!.getUser()),\n        map(u => u && u.profile));\n  }\n}\n"]},"metadata":{},"sourceType":"module"}