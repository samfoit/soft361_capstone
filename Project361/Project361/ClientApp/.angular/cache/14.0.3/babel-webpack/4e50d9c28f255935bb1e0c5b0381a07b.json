{"ast":null,"code":"import _asyncToGenerator from \"/Users/samfoit/CSCE361/soft361_capstone/Project361/Project361/ClientApp/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { AuthenticationResultStatus } from '../authorize.service';\nimport { BehaviorSubject } from 'rxjs';\nimport { LoginActions, QueryParameterNames, ApplicationPaths, ReturnUrlType } from '../api-authorization.constants';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../authorize.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/common\"; // The main responsibility of this component is to handle the user's login process.\n// This is the starting point for the login process. Any component that needs to authenticate\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\n// let the component perform the login and return back to the return url.\n\nexport class LoginComponent {\n  constructor(authorizeService, activatedRoute, router) {\n    this.authorizeService = authorizeService;\n    this.activatedRoute = activatedRoute;\n    this.router = router;\n    this.message = new BehaviorSubject(null);\n  }\n\n  ngOnInit() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const action = _this.activatedRoute.snapshot.url[1];\n\n      switch (action.path) {\n        case LoginActions.Login:\n          yield _this.login(_this.getReturnUrl());\n          break;\n\n        case LoginActions.LoginCallback:\n          yield _this.processLoginCallback();\n          break;\n\n        case LoginActions.LoginFailed:\n          const message = _this.activatedRoute.snapshot.queryParamMap.get(QueryParameterNames.Message);\n\n          _this.message.next(message);\n\n          break;\n\n        case LoginActions.Profile:\n          _this.redirectToProfile();\n\n          break;\n\n        case LoginActions.Register:\n          _this.redirectToRegister();\n\n          break;\n\n        default:\n          throw new Error(`Invalid action '${action}'`);\n      }\n    })();\n  }\n\n  login(returnUrl) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const state = {\n        returnUrl\n      };\n      const result = yield _this2.authorizeService.signIn(state);\n\n      _this2.message.next(undefined);\n\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          break;\n\n        case AuthenticationResultStatus.Success:\n          yield _this2.navigateToReturnUrl(returnUrl);\n          break;\n\n        case AuthenticationResultStatus.Fail:\n          yield _this2.router.navigate(ApplicationPaths.LoginFailedPathComponents, {\n            queryParams: {\n              [QueryParameterNames.Message]: result.message\n            }\n          });\n          break;\n\n        default:\n          throw new Error(`Invalid status result ${result.status}.`);\n      }\n    })();\n  }\n\n  processLoginCallback() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const url = window.location.href;\n      const result = yield _this3.authorizeService.completeSignIn(url);\n\n      switch (result.status) {\n        case AuthenticationResultStatus.Redirect:\n          // There should not be any redirects as completeSignIn never redirects.\n          throw new Error('Should not redirect.');\n\n        case AuthenticationResultStatus.Success:\n          yield _this3.navigateToReturnUrl(_this3.getReturnUrl(result.state));\n          break;\n\n        case AuthenticationResultStatus.Fail:\n          _this3.message.next(result.message);\n\n          break;\n      }\n    })();\n  }\n\n  redirectToRegister() {\n    this.redirectToApiAuthorizationPath(`${ApplicationPaths.IdentityRegisterPath}?returnUrl=${encodeURI('/' + ApplicationPaths.Login)}`);\n  }\n\n  redirectToProfile() {\n    this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\n  }\n\n  navigateToReturnUrl(returnUrl) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      // It's important that we do a replace here so that we remove the callback uri with the\n      // fragment containing the tokens from the browser history.\n      yield _this4.router.navigateByUrl(returnUrl, {\n        replaceUrl: true\n      });\n    })();\n  }\n\n  getReturnUrl(state) {\n    const fromQuery = this.activatedRoute.snapshot.queryParams.returnUrl; // If the url is coming from the query string, check that is either\n    // a relative url or an absolute url\n\n    if (fromQuery && !(fromQuery.startsWith(`${window.location.origin}/`) || /\\/[^\\/].*/.test(fromQuery))) {\n      // This is an extra check to prevent open redirects.\n      throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\n    }\n\n    return state && state.returnUrl || fromQuery || ApplicationPaths.DefaultLoginRedirectPath;\n  }\n\n  redirectToApiAuthorizationPath(apiAuthorizationPath) {\n    // It's important that we do a replace here so that when the user hits the back arrow on the\n    // browser they get sent back to where it was on the app instead of to an endpoint on this\n    // component.\n    const redirectUrl = `${window.location.origin}/${apiAuthorizationPath}`;\n    window.location.replace(redirectUrl);\n  }\n\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.AuthorizeService), i0.ɵɵdirectiveInject(i2.ActivatedRoute), i0.ɵɵdirectiveInject(i2.Router));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 3,\n  vars: 3,\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1);\n      i0.ɵɵpipe(2, \"async\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate(i0.ɵɵpipeBind1(2, 1, ctx.message));\n    }\n  },\n  dependencies: [i3.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuY3NzIn0= */\"]\n});","map":{"version":3,"mappings":"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","names":["AuthenticationResultStatus","BehaviorSubject","LoginActions","QueryParameterNames","ApplicationPaths","ReturnUrlType","LoginComponent","constructor","authorizeService","activatedRoute","router","ngOnInit","action","snapshot","url","path","Login","login","getReturnUrl","LoginCallback","processLoginCallback","LoginFailed","message","queryParamMap","get","Message","next","Profile","redirectToProfile","Register","redirectToRegister","Error","returnUrl","state","result","signIn","undefined","status","Redirect","Success","navigateToReturnUrl","Fail","navigate","LoginFailedPathComponents","queryParams","window","location","href","completeSignIn","redirectToApiAuthorizationPath","IdentityRegisterPath","encodeURI","IdentityManagePath","navigateByUrl","replaceUrl","fromQuery","startsWith","origin","test","DefaultLoginRedirectPath","apiAuthorizationPath","redirectUrl","replace","i0","selectors","decls","vars","template"],"sourceRoot":"","sources":["/Users/samfoit/CSCE361/soft361_capstone/Project361/Project361/ClientApp/src/api-authorization/login/login.component.ts","/Users/samfoit/CSCE361/soft361_capstone/Project361/Project361/ClientApp/src/api-authorization/login/login.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { AuthorizeService, AuthenticationResultStatus } from '../authorize.service';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { BehaviorSubject } from 'rxjs';\nimport { LoginActions, QueryParameterNames, ApplicationPaths, ReturnUrlType } from '../api-authorization.constants';\n\n// The main responsibility of this component is to handle the user's login process.\n// This is the starting point for the login process. Any component that needs to authenticate\n// a user can simply perform a redirect to this component with a returnUrl query parameter and\n// let the component perform the login and return back to the return url.\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent implements OnInit {\n  public message = new BehaviorSubject<string | null | undefined>(null);\n\n  constructor(\n    private authorizeService: AuthorizeService,\n    private activatedRoute: ActivatedRoute,\n    private router: Router) { }\n\n  async ngOnInit() {\n    const action = this.activatedRoute.snapshot.url[1];\n    switch (action.path) {\n      case LoginActions.Login:\n        await this.login(this.getReturnUrl());\n        break;\n      case LoginActions.LoginCallback:\n        await this.processLoginCallback();\n        break;\n      case LoginActions.LoginFailed:\n        const message = this.activatedRoute.snapshot.queryParamMap.get(QueryParameterNames.Message);\n        this.message.next(message);\n        break;\n      case LoginActions.Profile:\n        this.redirectToProfile();\n        break;\n      case LoginActions.Register:\n        this.redirectToRegister();\n        break;\n      default:\n        throw new Error(`Invalid action '${action}'`);\n    }\n  }\n\n\n  private async login(returnUrl: string): Promise<void> {\n    const state: INavigationState = { returnUrl };\n    const result = await this.authorizeService.signIn(state);\n    this.message.next(undefined);\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        break;\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(returnUrl);\n        break;\n      case AuthenticationResultStatus.Fail:\n        await this.router.navigate(ApplicationPaths.LoginFailedPathComponents, {\n          queryParams: { [QueryParameterNames.Message]: result.message }\n        });\n        break;\n      default:\n        throw new Error(`Invalid status result ${(result as any).status}.`);\n    }\n  }\n\n  private async processLoginCallback(): Promise<void> {\n    const url = window.location.href;\n    const result = await this.authorizeService.completeSignIn(url);\n    switch (result.status) {\n      case AuthenticationResultStatus.Redirect:\n        // There should not be any redirects as completeSignIn never redirects.\n        throw new Error('Should not redirect.');\n      case AuthenticationResultStatus.Success:\n        await this.navigateToReturnUrl(this.getReturnUrl(result.state));\n        break;\n      case AuthenticationResultStatus.Fail:\n        this.message.next(result.message);\n        break;\n    }\n  }\n\n  private redirectToRegister(): any {\n    this.redirectToApiAuthorizationPath(\n      `${ApplicationPaths.IdentityRegisterPath}?returnUrl=${encodeURI('/' + ApplicationPaths.Login)}`);\n  }\n\n  private redirectToProfile(): void {\n    this.redirectToApiAuthorizationPath(ApplicationPaths.IdentityManagePath);\n  }\n\n  private async navigateToReturnUrl(returnUrl: string) {\n    // It's important that we do a replace here so that we remove the callback uri with the\n    // fragment containing the tokens from the browser history.\n    await this.router.navigateByUrl(returnUrl, {\n      replaceUrl: true\n    });\n  }\n\n  private getReturnUrl(state?: INavigationState): string {\n    const fromQuery = (this.activatedRoute.snapshot.queryParams as INavigationState).returnUrl;\n    // If the url is coming from the query string, check that is either\n    // a relative url or an absolute url\n    if (fromQuery &&\n      !(fromQuery.startsWith(`${window.location.origin}/`) ||\n        /\\/[^\\/].*/.test(fromQuery))) {\n      // This is an extra check to prevent open redirects.\n      throw new Error('Invalid return url. The return url needs to have the same origin as the current page.');\n    }\n    return (state && state.returnUrl) ||\n      fromQuery ||\n      ApplicationPaths.DefaultLoginRedirectPath;\n  }\n\n  private redirectToApiAuthorizationPath(apiAuthorizationPath: string) {\n    // It's important that we do a replace here so that when the user hits the back arrow on the\n    // browser they get sent back to where it was on the app instead of to an endpoint on this\n    // component.\n    const redirectUrl = `${window.location.origin}/${apiAuthorizationPath}`;\n    window.location.replace(redirectUrl);\n  }\n}\n\ninterface INavigationState {\n  [ReturnUrlType]: string;\n}\n","<p>{{ message | async }}</p>"]},"metadata":{},"sourceType":"module"}